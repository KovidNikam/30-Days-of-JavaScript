var TimeLimitedCache = function() {
    this.cache = new Map();
};

/** 
 * @param {number} key
 * @param {number} value
 * @param {number} duration time until expiration in ms
 * @return {boolean} if un-expired key already existed
 */
 
TimeLimitedCache.prototype.set = function(key, value, duration) {
    const exists = this.cache.has(key);    
    if (exists) clearTimeout(this.cache.get(key).timeout);   
    const timeout = setTimeout(() => this.cache.delete(key), duration);
    this.cache.set(key, { value, timeout, expiresAt: Date.now() + duration });
    return exists;
};

/** 
 * @param {number} key
 * @return {number} value associated with key
 */

TimeLimitedCache.prototype.get = function(key) {
    const entry = this.cache.get(key);
    if (!entry || Date.now() >= entry.expiresAt) {
        this.cache.delete(key);
        return -1;
    }   
    return entry.value;
};

/** 
 * @return {number} count of non-expired keys
 */

TimeLimitedCache.prototype.count = function() {
    let count = 0;
    const now = Date.now();
    for (const [key, entry] of this.cache) {
        if (entry.expiresAt > now) count++;
        else this.cache.delete(key);
    }
    return count;
};
